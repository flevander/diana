#!/usr/bin/python

import subprocess
import sys
from pandas import *
import scipy.stats
from dianaLib import *



def calcIRtProb(df, irtKs):
	irtProb = lambda x:(1-scipy.stats.norm.cdf(abs(x)))*2
	df['measuredIRT'] = irtKs["intercept"] + df['rtApex']*irtKs["slope"]
	df['irtDev'] = df['rtApexAssay'] - df['measuredIRT']
	irtStat = df['irtDev'] / irtKs["std"]
	if shouldCalcIrtProb:
		df['irtProb'] = irtStat.apply(irtProb)
	else:
		df['irtProb'] = 0.0
	



def setupDF(df, isDecoy, pCutoff=0.99):
	df 		= df.fillna(1.0)
	fcs 	= df.fragmentCorrScore
	fcs[fcs > 1.0] = 1.0
	fcs[fcs < -1.0] = -1.0
	if "area" in df.columns: 
		df['var_area'] = np.log(df.area + 1.0)
	elif "rawArea" in df.columns:
		df['var_area'] = np.log(df.rawArea + 1.0)
	
	df['var_irtProb'] 		= df.irtProb
	df['var_irtAbsDev'] = -df.irtDev.abs()
	df['var_logRt'] 	= np.log(df.irtProb + 0.0000000001)
	df['main_var_logFMPRP'] 	= np.log(df.fragmentMarkovPcsRatioProb + 0.0000000001)
	df['main_var_FMPRP'] 		= 1.0 - df.fragmentMarkovPcsRatioProb
	df['var_FCS'] 	= df.fragmentCorrScore
	df['var_logIMPRP'] 	= np.log(df.isotopeMarkovPcsRatioProb + 0.0000000001)
	df['var_IMPRP'] 	= 1.0 - df.isotopeMarkovPcsRatioProb
	df['var_ICS'] 	= df.isotopeCorrScore
	df['var_absRt'] 	= df.rtApex / 200
	df['decoy']			= isDecoy
	df['transition_group_id'] = df['protein'] + '|' + df['peptideSequence'] + '|' + df['q1'].apply(str)
#	df['logArea'] = df['logArea'] - df['logArea'].mean()) / df['logArea'].std()
	return df




def setup(irtFile):
	real 	= read_csv(realFile, sep="\t")
	decoy 	= read_csv(decoyFile, sep="\t")
	
	irtKs = {}
	irt = open(irtFile, 'r')
	for line in irt:
		if ':' in line:
			t = line.split(":")
			irtKs[t[0].strip()] = float(t[1].strip())
	
	print " slope: ", 	float(irtKs["slope"])
	print " icept: ", 	float(irtKs["intercept"])
	print "   std: ", 		float(irtKs["std"] )
	
	calcIRtProb(real, irtKs)
	calcIRtProb(decoy, irtKs)
	
	return setupDF(real, False), setupDF(decoy, True)



dryrun = False
usage = "usage:\n> pyProphetClassifier [--diana-dir=X] config.conf target.csv decoy.csv swathfile.irtmap"

def readArgs(args):
	if len(args) == 4:
		global confPath
		global realFile
		global decoyFile
		global irtMap
		confPath 	= args[-4]
		realFile 	= args[-3]
		decoyFile 	= args[-2]
		irtMap 		= args[-1]
	elif args[0] == "-d":
		global dryrun
		dryrun = True
		readArgs(args[1:])
	elif args[0].lower().startswith("--diana-dir="):
		readArgs(args[1:])
		

if len(sys.argv) < 5:
	print usage
	exit(1)
else:	
	readArgs(sys.argv[1:])


conf 		= readConf(confPath)
shouldCalcIrtProb = False

if dryrun:
	print "  realFile:", realFile
	print " decoyFile:", decoyFile
	print "    irtMap:", irtMap
	print "      conf:", confPath
	for k,v in conf.iteritems():
		print "          ", k, ":", v
	



real, decoy = setup(irtMap)
merged 		= concat([real, decoy], ignore_index=True)
pyProphIn	= to(realFile, "pyProph.csv")
project 	= base(realFile)

if dryrun:
	print real


outputCols = ['transition_group_id', 'decoy', 
			'main_var_FMPRP', 'var_irtProb', 'var_irtAbsDev', 'var_FCS', 'var_IMPRP', 'var_ICS', #'var_area', 
			'rtApex', 'q1', 'charge', 'peptideSequence']

if 'area' in merged.columns:
	outputCols.append('area')
else:
	outputCols = outputCols + ['rawArea', 'correctedArea', 'isotopeArea']

merged.to_csv(
	pyProphIn, 
	index=False, 
	sep='\t',
	cols=outputCols 
	)

args = ""
pyProphetPath = None

for k,v in conf.iteritems():
	if k.lower() == "pyprophetpath":
		pyProphetPath = v
	elif v == "True":
		args += " --%s" % k
	else:
		args += " --%s=%s" % (k, v)

if pyProphetPath is None:
	print "No pyprophet path given, quitting...."
	exit(1)

args += " %s " % (pyProphIn)

if dryrun:
	print "    DEBUG      "
	print "   =======     "
	print " wanted to run:"
	print "pyprophet", args
else:
	os.system(pyProphetPath + " " + args)
	
#	pyProphOutFile = "%s_raw_stat.xls" % withoutExt(realFile)
#	dianaRun("csv2esv", "-f %s" % pyProphOutFile, False)
#	dianaRun("esv", "clean %s.esv %s_q0.01.esv 'qvalue < 0.01'" % (pyProphOutFile, pyProphOutFile), False)
