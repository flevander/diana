#!/usr/bin/python

import os
import os.path
import sys
import time
import shutil
from datetime import datetime
from dianaDir import *
from dianaLib import *


usage = """
> diana [OPTIONS] CONF SWATH_LIST_FILE TARGET_ASSAY_LIST DECOY_ASSAY_LIST IRT_ASSAYS

CONF:
a configuration file were each row has a key-value pair separated by a '=' char. 
Whitespaces are ignored.

SWATH_LIST_FILE:
file that lists the swath raw data files that are supposed to be analyzed. Each
row contains the absolute path to one .raw or .wiff file that is to be analyzed.

TARGET_ASSAY_LIST / DECOY_ASSAY_LIST:
file that lists target/decoy assay sets to be analyzed. Each row contains the absolute 
path to one .traml assay file. Each of these will be searched on every file in the 
SWATH_LIST_FILE. As a special case, if the file is of type .traml this file will be 
used directly as a 1 file list. If there are more target assay files than decoys, 
the decoys will be recycled. If there are more decoys assays files, only the first 
will be used.

IRT_ASSAYS:
traml assay file for the peptides to be used for iRT retention time normalization. 

OPTIONS:
	-d                      do dryrun
	--diana-dir=DIRECTORY   were diana folder is
"""

confPath 		= None
swathListFile 	= None
targetAssayList = None
decoyAssayList 	= None
irtAssayFile	= None
conf 			= {}
dryrun			= False
dianaRunID		= datetime.now().strftime("%Y-%m-%d-%H_%M_%S") + "-DIANA_RUN"
analysisStartTime 	= time.time()

def readArgs(args):
	if len(args) == 5:
		global confPath
		global swathListFile
		global targetAssayList
		global decoyAssayList
		global irtAssayFile
		confPath 		= args[-5]
		swathListFile 	= args[-4]
		targetAssayList = args[-3]
		decoyAssayList 	= args[-2]
		irtAssayFile 	= args[-1]
	elif args[0] == "-d":
		global dryrun
		dryrun = True
		readArgs(args[1:])
	elif args[0].lower().startswith("--diana-dir="):
		readArgs(args[1:])
		

if len(sys.argv) < 6:
	print usage
	exit(1)
else:	
	readArgs(sys.argv[1:])




def printMajor(title):
	print
	print "   ", title #
	print "   ", "="*len(title)
printMajor("DIANA ANALYSIS")
print 
	


# READ INPUTS
conf 					= readConf(confPath)
deleteIntermediaryData 	= default(conf, "DeleteIntermediaryData", "False").lower() == "true"
startStage				= int(default(conf, "StartStage", "0"))
stopStage				= int(default(conf, "StopStage", "999"))
pythonPath				= default(conf, "PythonPath", "python")
javaPath				= default(conf, "JavaPath", "java")

swathFiles = []
slfl = swathListFile.lower()
if (slfl.endswith("wiff") or slfl.endswith("raw") or 
	slfl.endswith("mzml") or slfl.endswith("mzml.gz")):
	swathFiles.append(swathListFile)
else:
	swathFiles = readList(swathListFile)

targetAssays = []
if targetAssayList.lower().endswith("traml"):
	targetAssays.append(targetAssayList)
else:
	targetAssays = readList(targetAssayList)

decoyAssays = []
if decoyAssayList.lower().endswith("traml"):
	decoyAssays.append(decoyAssayList)
else:
	decoyAssays = readList(decoyAssayList)
	


##################################################
#	TODO: validate input before starting 
##################################################

# attempt msconvert
if startStage < 1:
	msconvertConfPath 	= os.path.join(dianaDir, "bin", "conf", "msconvert.conf")
	msconvertConf 		= readConf(msconvertConfPath)
	vmName 				= require(msconvertConf, 'WindowsVBoxName')

	returnCode, stdout, stderr 	= simpleExe("VBoxManage list runningvms", False)

	if vmName not in stdout:
		print "  Virtual machine with name '%s' appears not to be running. Fix this. Exiting..." % vmName
		exit(101)






class LogFile:
	
	def __init__(self, header):
		self.data = [header]
		
	def log(self, row):
		self.data.append(row)
	
	def toFile(self, path):
		f = open(os.path.join(analysisDir, path), "w")
		for line in self.data:
			f.write("%s\n" % ('\t'.join(line)))
		f.close()


# MAIN LOOP
analysisDir 	= require(conf, 'AnalysisDir')
numIsotopes 	= default(conf, 'NumIsotopes', '0')
decoys 			= decoyAssays[0]
sectionLog 		= LogFile(["dianaRunID", "file", "section", "sectionTime", "fileElapsedTime", "dryrun"])
fileAnalysisLog = LogFile(["dianaRunID", "file", "fileElapsedTime", "lastSection", "dryrun"])
pyProphetConf	= require(conf, "PyProphetConf")

# TODO: error handling for incorrect conf values
irtMapMinPeps 	= int(default(conf, 'IrtMapMinPeps', '5'))
irtMapQval 		= float(default(conf, 'IrtMapQval', '0.15'))
irtMapNstd 		= int(default(conf, 'IrtMapNstd', '3'))






class FileAnalysis:
	
	
	
	def __init__(self, swathFile):
		self.swathFile = swathFile
		self.mzMLpath = self.swathFile
		self.fileStartTime = time.time()
		self.fileBase = base(swathFile)
		self.fileDir = os.path.join(analysisDir, self.fileBase)
		self.irtMap	= os.path.join(self.fileDir, "%s.irtmap" % self.fileBase)
		self.allTargets = os.path.join(self.fileDir, "%s_all_targets.esv" % self.fileBase)
		self.allTargetsCsv 	= to(self.allTargets, "csv")
		self.decoyCsv = os.path.join(self.fileDir, to(os.path.basename(decoys), "csv"))
		self.irtAssayCsv = os.path.join(self.fileDir, to(os.path.basename(irtAssayFile), "csv"))
		try:
			os.mkdir(self.fileDir)
		except:
			pass
	
	
	
	
	def section(self, stage, name):
		self.currentSection 	= name
		self.sectionStartTime 	= time.time()
		print
		if stage is not None:
			print "  stage", stage
		print "  " + name
		print "  " + "-" * len(name), "elapsed time: %.3fs" % (self.sectionStartTime - self.fileStartTime)
		print
	
	
	
	def dianaRun(self, cmd, args, dryrun = True):
		return execute(cmd, args, dryrun) == 0
	
	
	
	def dianaRunJar(self, jar, args, dryrun = True):
		return execute(javaPath, "-jar '%s' "%os.path.join(dianaDir, "bin", "jar", jar) + args, dryrun) == 0
	
	
	
	def dianaRunPython(self, pyFile, args, dryrun = True):
		return execute(pythonPath, "'%s' "%os.path.join(dianaDir, "bin", pyFile) + args, dryrun) == 0
	
	
	
	def score(self, assays):
		assayBase = base(assays)
		chroms = os.path.join(self.fileDir, "%s.chrom.mzML" % assayBase)
		result = os.path.join(self.fileDir, assayBase)
		cmd = "--no-xml --isotopes=%s --output='%s' '%s' '%s'" % (
				numIsotopes, result, chroms, assays)
		return self.dianaRun("diana-score", cmd, dryrun)
	
	
	
	def extractAndScore(self, assayLists):
		cmdArgs = "--msResolution=%s --mode=%s --diaWindows=%s --nIsotopes=%s --outDir='%s' '%s' " % ( 
				require(conf, 'ExtractResolution'), require(conf, 'ExtractMode'),
				default(conf, 'DiaWindows', "gillet"), 
				numIsotopes, self.fileDir, self.mzMLpath)
		if default(conf, "ForceMzML", "false").lower() == "true":
			cmdArgs = cmdArgs + "--force "
		cmd = " ".join( assayLists )
		if not self.dianaRunJar("DianaExtractor-0.4.2.jar", cmdArgs + cmd, dryrun):
			return False
		
		for assays in assayLists:
			assayBase = base(assays)
			chroms = os.path.join(self.fileDir, "%s.chrom.mzML" % assayBase)
			result = os.path.join(self.fileDir, assayBase)
			cmd = "--no-xml --isotopes=%s --output='%s' '%s' '%s'" % (
					numIsotopes, result, chroms, assays)
			if not self.dianaRunJar("DianaScorer-0.8.2.jar", cmd, dryrun):
				return False
		
		return True
		
	
	
	
	def logSectionStats(self):
		sectionLog.log([								\
			dianaRunID, 								\
			self.swathFile,								\
			self.currentSection, 						\
			str(time.time() - self.sectionStartTime), 	\
			str(time.time() - self.fileStartTime),		\
			str(dryrun)									\
			])
	
	
	
	def wrapUpFile(self, analysisCompleted = False):
		fileAnalysisLog.log([							\
				dianaRunID,								\
				self.swathFile,							\
				str(time.time() - self.fileStartTime),	\
				self.currentSection,					\
				str(dryrun)								\
			])
		if not analysisCompleted:
			printMajor("#%&8! ANALYSIS FAILED IN SECTION " + self.currentSection)
		
		if deleteIntermediaryData:
			for f in os.listdir(self.fileDir):
				path = os.path.join(self.fileDir, f)
				if f.lower().endswith(".mzml") or f.lower().endswith(".ibd"):
					if dryrun:
						print "removing %s" % path
					else:
						os.remove(path)
	
	
	
	def run(self):
		printMajor("ANALYZING FILE %s" % self.fileBase)

		# msconvert
		def msconvert(stage):
			self.section(stage, "MSCONVERT")
			
			cmd = "--diana-dir='%s' -z -n --outdir '%s' --outfile '%s' '%s'" % (dianaDir, 
									self.fileDir, self.fileBase, self.swathFile)
			if not self.dianaRunPython("msconvert", cmd, dryrun):
				return False
			
			self.mzMLpath = "%s/%s.mzML" % (self.fileDir, self.fileBase)
			return True
		
		# EXTRACT AND SCORE
		def extractAndScore(stage):
			self.section(stage, "CHROMATOGRAM EXTRACT AND SCORE")
			if not self.mzMLpath.lower().endswith("mzml") and not self.mzMLpath.lower().endswith("mzml.gz"):
				self.mzMLpath = "%s/%s.mzML" % (self.fileDir, self.fileBase)
				if not os.path.isfile(self.mzMLpath):
					print "can't analyze non-mzML file '%s' without using mzconvert!" % self.swathFile
					return False

			if not self.extractAndScore([targetAssays[0], decoys, irtAssayFile]):
				return False
			
			for assays in targetAssays[1:]:
				if not self.extractAndScore([assays]):
					return False
			
			cmd = "concat --out='%s' " % self.allTargets
			cmd += " ".join([ quote(os.path.join(self.fileDir, "%s.esv" % base(x))) 
								for x in targetAssays ])
			return self.dianaRunJar("EsvCLI-1.0.1.jar", cmd, dryrun)
		

		# CONVERT TO CSV
		def toCsv(stage):
			self.section(stage, "CONVERT TO CSV")
			def toEsvToCsv(path):
				return self.dianaRunPython("esv2csv", quote(path), dryrun)

			if not toEsvToCsv(to(self.allTargets, "esv")):
				return False
			
			if not toEsvToCsv(to(self.decoyCsv, "esv")):
				return False
			
			if not toEsvToCsv(to(self.irtAssayCsv, "esv")):
				return False
			
			return True
		
		
		# CALC IRT MAP
		def calcIrtMap(stage):
			self.section(stage, "CALC iRT MAP")
			quotedFiles = "--min-peps=%d --q-val=%f --n-std=%d --diana-dir='%s' '%s' '%s' '%s'" % (
							irtMapMinPeps, irtMapQval, irtMapNstd, 
							dianaDir, self.irtAssayCsv, self.decoyCsv, self.irtMap)
			return self.dianaRunPython("irtMap.py", quotedFiles, dryrun)
		
		# RUN CLASSIFIER
		def classify(stage):
			self.section(stage, "CLASSIFY")
			quotedFiles = "--diana-dir='%s' '%s' '%s' '%s' '%s'" % (dianaDir, pyProphetConf, 
											self.allTargetsCsv, self.decoyCsv, self.irtMap)
			return self.dianaRunPython("pyProphetClassifier", quotedFiles, dryrun)
		
		
		stages = [msconvert, extractAndScore, toCsv, calcIrtMap, classify]
		
		for curStage in range(startStage, min(len(stages), stopStage)):
			stage = stages[curStage]
			if not stage(curStage):
				return self.wrapUpFile()
			else:
				self.logSectionStats()
		
		# finish
		self.section(None,"DONE")
		self.wrapUpFile(True)	





for swathFile in swathFiles:
	fa = FileAnalysis(swathFile.strip())
	fa.run()
	
	
		

sectionLog.toFile(dianaRunID + ".section.csv")
fileAnalysisLog.toFile(dianaRunID + ".file.csv")
print "   total analysis time: %.3fs" % (time.time() - analysisStartTime)


